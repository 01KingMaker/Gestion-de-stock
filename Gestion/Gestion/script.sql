CREATE SEQUENCE SEQ_CATEGORIE_PRODUIT;
CREATE SEQUENCE SEQ_PRODUIT;
CREATE SEQUENCE SEQ_COMMERCIAL;
CREATE SEQUENCE SEQ_ENTREE;
CREATE SEQUENCE SEQ_SORTIE;
CREATE SEQUENCE SEQ_STOCK;
CREATE SEQUENCE SEQ_ADMIN;
CREATE SEQUENCE SEQ_UNITE;
CREATE SEQUENCE SEQ_EMP;

CREATE TABLE UNITE(
    ID VARCHAR(255) PRIMARY KEY,
    VALEUR VARCHAR(255) NOT NULL,
    UNITE FLOAT
);

CREATE TABLE COMMERCIAL(
    ID VARCHAR(255) PRIMARY KEY,
    DESIGNATION VARCHAR(255) NOT NULL,
    PHOTO VARCHAR(255)
);

CREATE TABLE CATEGORIE_PRODUIT(
    ID VARCHAR(255) PRIMARY KEY,
    DESIGNATION VARCHAR(255) NOT NULL,
    REFERENCE_CATEGORIE VARCHAR(255) NOT NULL
);

CREATE TABLE PRODUIT(
    ID VARCHAR(255) PRIMARY KEY,
    ID_CATEGORIE VARCHAR(255) REFERENCES CATEGORIE_PRODUIT(ID),
    ID_COMMERCIAL VARCHAR(255) REFERENCES COMMERCIAL(ID),
    DESIGNATION VARCHAR(255) NOT NULL,
    REFERENCE_PRODUIT VARCHAR(255) NOT NULL,
    PRIX_UNITAIRE FLOAT NOT NULL,
    id_UNITE VARCHAR(255) REFERENCES UNITE(ID)
);

CREATE TABLE ENTREE(
    ID VARCHAR(255) PRIMARY KEY,
    ID_PRODUIT VARCHAR(255) REFERENCES PRODUIT(ID),
    DATE_ENTREE TIMESTAMP,
    DATE_PEREMPTION TIMESTAMP,
    PRIX_UNITAIRE FLOAT NOT NULL,
    QUANTITE FLOAT
);

CREATE TABLE SORTIE(
    ID VARCHAR(255) PRIMARY KEY,
    ID_PRODUIT VARCHAR(255) REFERENCES PRODUIT(ID),
    DATE_SORTIE TIMESTAMP,
    DATE_PEREMPTION TIMESTAMP,
    PRIX_UNITAIRE FLOAT NOT NULL,
    QUANTITE FLOAT
);

CREATE TABLE STOCK(
    ID VARCHAR(255) PRIMARY KEY,
    ID_PRODUIT VARCHAR(255) REFERENCES PRODUIT(ID),
    QUANTITE FLOAT,
    DATE_STOCK TIMESTAMP default NOW()
);

CREATE TABLE MARGE_BENEFICIAIRE;

SELECT SUM(QUANTITE) QUANTITE, ID_PRODUIT FROM SORTIE WHERE DATE_PEREMPTION < NOW() GROUP BY ID_PRODUIT;

SELECT SUM(QUANTITE) QUANTITE, ID_PRODUIT FROM ENTREE GROUP BY ID_PRODUIT;

drop view ETAT_STOCK; --tsy lany date
CREATE VIEW ETAT_STOCK AS
    SELECT U.VALEUR UNITE ,(E.QUANTITE - S.QUANTITE) QUANTITE, P.DESIGNATION, P.ID ID_PRODUIT, P.ID_CATEGORIE ID_CATEGORIE, CAT.DESIGNATION CATEGORIE, P.ID_COMMERCIAL ID_COMMERCIAL, COM.DESIGNATION COMMERCIAL FROM 
        (SELECT SUM(QUANTITE) QUANTITE, ID_PRODUIT FROM ENTREE WHERE DATE_PEREMPTION > NOW() GROUP BY ID_PRODUIT) E
        JOIN (SELECT SUM(QUANTITE) QUANTITE, ID_PRODUIT FROM SORTIE GROUP BY ID_PRODUIT) S
            ON E.ID_PRODUIT = S.ID_PRODUIT
        JOIN PRODUIT P
            ON S.ID_PRODUIT = P.ID
        JOIN COMMERCIAL COM 
            ON COM.ID = P.ID_COMMERCIAL
        JOIN CATEGORIE_PRODUIT CAT
            ON CAT.ID = P.ID_CATEGORIE
        JOIN UNITE U
            ON U.ID = P.ID_UNITE
        GROUP BY E.ID_PRODUIT, P.DESIGNATION, E.QUANTITE, S.QUANTITE, P.ID, P.ID_CATEGORIE, P.ID_COMMERCIAL, CAT.DESIGNATION, COM.DESIGNATION, U.VALEUR;


drop view ETAT_STOCK_PERIME; --lany date
CREATE VIEW ETAT_STOCK_PERIME AS
    SELECT U.VALEUR UNITE ,(E.QUANTITE - S.QUANTITE) QUANTITE, P.DESIGNATION, P.ID ID_PRODUIT, P.ID_CATEGORIE ID_CATEGORIE, CAT.DESIGNATION CATEGORIE, P.ID_COMMERCIAL ID_COMMERCIAL, COM.DESIGNATION COMMERCIAL FROM 
        (SELECT SUM(QUANTITE) QUANTITE, ID_PRODUIT FROM ENTREE WHERE DATE_PEREMPTION <= NOW() GROUP BY ID_PRODUIT) E
        JOIN (SELECT SUM(QUANTITE) QUANTITE, ID_PRODUIT FROM SORTIE GROUP BY ID_PRODUIT) S
            ON E.ID_PRODUIT = S.ID_PRODUIT
        JOIN PRODUIT P
            ON S.ID_PRODUIT = P.ID
        JOIN COMMERCIAL COM 
            ON COM.ID = P.ID_COMMERCIAL
        JOIN CATEGORIE_PRODUIT CAT
            ON CAT.ID = P.ID_CATEGORIE
        JOIN UNITE U
            ON U.ID = P.ID_UNITE
        GROUP BY E.ID_PRODUIT, P.DESIGNATION, E.QUANTITE, S.QUANTITE, P.ID, P.ID_CATEGORIE, P.ID_COMMERCIAL, CAT.DESIGNATION, COM.DESIGNATION, U.VALEUR;
